/* eslint-disable import/extensions */
import fs from 'fs';
import { fileURLToPath } from 'node:url';
import { babel as pluginBabel } from '@rollup/plugin-babel';
import pluginPeerDepsExternal from 'rollup-plugin-peer-deps-external';
import pluginResolve from '@rollup/plugin-node-resolve';
import pluginCommonjs from '@rollup/plugin-commonjs';
import pluginDeclarations from 'rollup-plugin-dts';
import pluginAlias from '@rollup/plugin-alias';
import pluginReplace from '@rollup/plugin-replace';
// eslint-disable-next-line import/no-extraneous-dependencies
import ts from 'typescript';

const webExtensions = [
  '.web.js',
  '.web.ts',
  '.web.tsx',
  '.desktop.js',
  '.desktop.ts',
  '.desktop.tsx',
  '.mobile.js',
  '.mobile.ts',
  '.mobile.tsx',
  '.js',
  '.ts',
  '.jsx',
  '.tsx',
  '.mjs',
];

const nativeExtensions = [
  '.native.js',
  '.native.ts',
  '.native.tsx',
  '.android.js',
  '.android.ts',
  '.android.tsx',
  '.ios.js',
  '.ios.ts',
  '.ios.tsx',
  '.js',
  '.ts',
  '.jsx',
  '.tsx',
  '.mjs',
];

const inputRootDirectory = 'src';
const outputRootDirectory = 'build';
const exportCategories = ['components', 'tokens', 'utils'];
const themeBundleCategories = ['tokens', 'utils'];

const aliases = pluginAlias({
  entries: [
    { find: '~src', replacement: fileURLToPath(new URL(inputRootDirectory, import.meta.url)) },
    {
      find: '~components',
      replacement: fileURLToPath(new URL(`${inputRootDirectory}/components`, import.meta.url)),
    },
    {
      find: '~utils',
      replacement: fileURLToPath(new URL(`${inputRootDirectory}/utils`, import.meta.url)),
    },
    {
      find: '~tokens',
      replacement: fileURLToPath(new URL(`${inputRootDirectory}/tokens`, import.meta.url)),
    },
  ],
});

const getWebConfig = ({ exportCategory }) => ({
  input: `${inputRootDirectory}/${exportCategory}/index.ts`,
  output: [
    {
      file: `${outputRootDirectory}/${exportCategory}/index.${
        process.env.NODE_ENV || 'development'
      }.web.js`,
      format: 'esm',
      sourcemap: true,
    },
  ],
  external: (id) => id.includes('@babel/runtime'),
  plugins: [
    pluginReplace({
      __DEV__: process.env.NODE_ENV !== 'production',
      preventAssignment: true,
    }),
    pluginPeerDepsExternal(),
    pluginResolve({ extensions: webExtensions }),
    pluginCommonjs(),
    pluginBabel({
      exclude: 'node_modules/**',
      babelHelpers: 'runtime',
      envName: 'production',
      extensions: webExtensions,
    }),
    aliases,
  ],
});

const getNativeConfig = ({ exportCategory }) => ({
  input: `${inputRootDirectory}/${exportCategory}/index.ts`,
  output: [
    {
      file: `${outputRootDirectory}/${exportCategory}/index.native.js`,
      format: 'esm',
      sourcemap: true,
    },
  ],
  external: (id) => id.includes('@babel/runtime'),
  plugins: [
    pluginPeerDepsExternal(),
    pluginResolve({ extensions: nativeExtensions }),
    pluginCommonjs(),
    pluginBabel({
      exclude: 'node_modules/**',
      babelHelpers: 'runtime',
      envName: 'production',
      extensions: nativeExtensions,
    }),
    aliases,
  ],
});

const getDeclarationsConfig = ({ exportCategory, isNative }) => {
  const platform = isNative ? 'native' : 'web';

  // Need to resolve paths in d.ts files
  // https://github.com/Swatinem/rollup-plugin-dts/issues/169
  const currentTsConfig = ts.readConfigFile(
    fileURLToPath(new URL(`tsconfig.json`, import.meta.url)),
    (p) => fs.readFileSync(p, 'utf8'),
  ).config.compilerOptions;
  const compilerOptions = {
    ...currentTsConfig,
    moduleSuffixes: [`.${platform}`, ''],
  };

  return {
    // input will be the platform specific type which is generated by
    // `yarn build:generate-types`
    input: `${outputRootDirectory}/types/${platform}/${exportCategory}/index.d.ts`,
    output: [
      {
        // don't prefix web index export with .web, for backwards compatibility with TS<4.7
        file: `${outputRootDirectory}/${exportCategory}/${
          isNative ? 'index.native.d.ts' : 'index.d.ts'
        }`,
        format: 'esm',
      },
    ],
    plugins: [
      pluginDeclarations({
        compilerOptions,
      }),
    ],
  };
};

const getCSSVariablesConfig = ({ exportCategory }) => ({
  input: `src/${exportCategory}/index.ts`,
  output: {
    file: `${outputRootDirectory}/js-bundle-for-css/${exportCategory}Bundle.js`,
    format: 'cjs',
  },
  plugins: [
    pluginPeerDepsExternal(),
    pluginResolve({ extensions: webExtensions }),
    pluginCommonjs(),
    pluginBabel({
      exclude: 'node_modules/**',
      babelHelpers: 'runtime',
      envName: 'production',
      extensions: webExtensions,
    }),
    aliases,
  ],
});

const config = () => {
  const framework = process.env.FRAMEWORK;
  const generateCSSVariables = process.env.GENERATE_CSS_VARIABLES;

  if (generateCSSVariables == 'true' && framework === 'REACT') {
    return themeBundleCategories
      .map((exportCategory) => [getCSSVariablesConfig({ exportCategory })])
      .flat();
  }
  if (framework === 'REACT') {
    return exportCategories.map((exportCategory) => [getWebConfig({ exportCategory })]).flat();
  }

  if (framework === 'REACT_NATIVE') {
    return exportCategories.map((exportCategory) => [getNativeConfig({ exportCategory })]).flat();
  }

  return exportCategories
    .map((exportCategory) => [
      // bundle our declarations for each category `components`, `tokens` and `utils` and place it next to each category under `build`
      getDeclarationsConfig({ exportCategory, isNative: false }),
      getDeclarationsConfig({ exportCategory, isNative: true }),
    ])
    .flat();
};

export default config();
