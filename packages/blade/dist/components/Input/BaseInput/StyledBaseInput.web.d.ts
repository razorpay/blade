import { default as React } from 'react';
declare const StyledBaseInput: React.ForwardRefExoticComponent<{
    handleOnFocus?: import('../../Form').FormInputHandleOnEvent | undefined;
    handleOnChange?: import('../../Form').FormInputHandleOnEvent | undefined;
    handleOnBlur?: import('../../Form').FormInputHandleOnEvent | undefined;
    handleOnSubmit?: import('../../Form').FormInputHandleOnEvent | undefined;
    handleOnKeyDown?: import('../../Form/FormTypes').FormInputHandleOnKeyDownEvent | undefined;
    handleOnInput?: import('../../Form').FormInputHandleOnEvent | undefined;
    handleOnClick?: import('../../Form/FormTypes').FormInputHandleOnClickEvent | undefined;
    hasLeadingIcon?: boolean | undefined;
    hasTrailingIcon?: boolean | undefined;
    accessibilityProps: Record<string, unknown>;
    currentInteraction: import('../../../utils/useInteraction').ActionStates;
    setCurrentInteraction: React.Dispatch<React.SetStateAction<import('../../../utils/useInteraction').ActionStates>>;
    isTextArea?: boolean | undefined;
    hasTags?: boolean | undefined;
    $size: NonNullable<"medium" | "large" | undefined>;
    isTableInputCell: NonNullable<boolean | undefined>;
    valueComponentType: NonNullable<"text" | "heading" | undefined>;
    hasLeadingDropdown?: boolean | undefined;
} & Pick<import('./BaseInput').BaseInputProps, "textAlign" | "type" | "name" | "value" | "as" | "tabIndex" | "id" | "prefix" | "defaultValue" | "autoFocus" | "placeholder" | "autoCapitalize" | "hasPopup" | "numberOfLines" | "isDisabled" | "trailingInteractionElement" | "shouldIgnoreBlurAnimation" | "leadingIcon" | "onTrailingInteractionElementClick" | "leadingInteractionElement" | "suffix" | "trailingIcon" | "validationState" | "isRequired" | "maxCharacters" | "keyboardType" | "keyboardReturnKeyType" | "popupId" | "isPopupExpanded" | "isDropdownTrigger" | "autoCompleteSuggestionType"> & React.RefAttributes<HTMLButtonElement | HTMLInputElement>>;
export { StyledBaseInput };
