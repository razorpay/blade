import { ReactNode } from 'react';
import { ButtonMinHeight } from './buttonTokens';
import { BaseButtonProps } from './BaseButton';
import { DurationString, EasingString } from '../../../tokens/global';
import { BorderRadiusValues, BorderWidthValues, SpacingValues } from '../../../tokens/theme/theme';
import { StyledPropsBlade } from '../../Box/styledProps';
import { BladeCommonEvents } from '../../types';
import { IconProps, IconSize } from '../../Icons';
import { BaseSpinnerProps } from '../../Spinner/BaseSpinner';
import { Theme } from '../../BladeProvider';
import { DataAnalyticsAttribute, DotNotationSpacingStringToken } from '../../../utils/types';
import { BaseTextProps } from '../../Typography/BaseText/types';
import { DotNotationToken } from '../../../utils/lodashButBetter/get';
/**
 * All possible icon colors, derived from `IconProps` minus `currentColor` because possible values should only be from tokens
 */
export type IconColor = Exclude<IconProps['color'], 'currentColor'>;
export type BaseButtonStyleProps = {
    iconSize: IconSize;
    spinnerSize: BaseSpinnerProps['size'];
    fontSize: keyof Theme['typography']['fonts']['size'];
    lineHeight: keyof Theme['typography']['lineHeights'];
    minHeight: `${ButtonMinHeight}px`;
    iconPadding?: DotNotationSpacingStringToken;
    iconColor: IconColor;
    textColor: BaseTextProps['color'];
    buttonPaddingTop: SpacingValues;
    buttonPaddingBottom: SpacingValues;
    buttonPaddingLeft: SpacingValues;
    buttonPaddingRight: SpacingValues;
    text?: string;
    defaultBackgroundColor: string;
    defaultBorderColor: string;
    hoverBackgroundColor: string;
    hoverBorderColor: string;
    hoverIconColor: string;
    focusBackgroundColor: string;
    focusBorderColor: string;
    focusRingColor: string;
    motionDuration: DurationString;
    motionEasing: EasingString;
    borderWidth: BorderWidthValues;
    borderRadius: BorderRadiusValues;
    height?: string;
    width?: string;
};
export type StyledBaseButtonProps = Omit<BaseButtonProps, 'icon' | 'children' | 'accessibilityLabel' | keyof DataAnalyticsAttribute> & {
    defaultBorderColor: string;
    minHeight: `${ButtonMinHeight}px`;
    height?: BaseButtonStyleProps['height'];
    width?: BaseButtonStyleProps['width'];
    buttonPaddingTop: SpacingValues;
    buttonPaddingBottom: SpacingValues;
    buttonPaddingLeft: SpacingValues;
    buttonPaddingRight: SpacingValues;
    children: ReactNode;
    defaultBackgroundColor: string;
    disabled: boolean;
    focusBorderColor: string;
    focusBackgroundColor: string;
    focusRingColor: string;
    hoverBorderColor: string;
    hoverBackgroundColor: string;
    hoverIconColor: DotNotationToken<Theme['colors']>;
    isFullWidth: boolean;
    motionDuration: DurationString;
    motionEasing: EasingString;
    borderWidth: BorderWidthValues;
    borderRadius: BorderRadiusValues;
    accessibilityProps: Record<string, unknown>;
    isPressed: boolean;
} & StyledPropsBlade & BladeCommonEvents;
export type AnimatedButtonContentProps = Pick<StyledBaseButtonProps, 'motionDuration' | 'motionEasing' | 'isPressed'>;
