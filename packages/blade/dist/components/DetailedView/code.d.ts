declare const DetailedViewStoryCode = "import React from 'react';\nimport {\n  Drawer,\n  DrawerHeader,\n  DrawerBody,\n  Box,\n  IconButton,\n  MoreHorizontalIcon,\n  Table as TableComponent,\n  TableHeader,\n  TableHeaderRow,\n  TableHeaderCell,\n  TableBody,\n  TableRow,\n  TableCell,\n  TableToolbar,\n  TableToolbarActions,\n  TablePagination,\n  Code,\n  Amount,\n  Badge,\n  Button,\n  StepGroup,\n  StepItem,\n  StepItemIndicator,\n  Collapsible,\n  CollapsibleBody,\n  CollapsibleLink,\n  Divider,\n  Link,\n  CopyIcon,\n  DownloadIcon,\n  Text,\n} from '@razorpay/blade/components';\nimport type { TableData, BoxProps } from '@razorpay/blade/components';\n\nconst nodes: Item[] = [\n  ...Array.from({ length: 20 }, (_, i) => ({\n    id: (i + 1).toString(),\n    paymentId: `rzp${Math.floor(Math.random() * 1000000)}`,\n    amount: Number((Math.random() * 10000).toFixed(2)),\n    status: ['Completed', 'Pending', 'Failed'][Math.floor(Math.random() * 3)],\n    date: new Date(\n      2021,\n      Math.floor(Math.random() * 12),\n      Math.floor(Math.random() * 28) + 1\n    ),\n    type: ['Payout', 'Refund'][Math.floor(Math.random() * 2)],\n    method: ['Bank Transfer', 'Credit Card', 'PayPal'][\n      Math.floor(Math.random() * 3)\n    ],\n    bank: ['HDFC', 'ICICI', 'SBI'][Math.floor(Math.random() * 3)],\n    account: Math.floor(Math.random() * 1000000000).toString(),\n    name: [\n      'Anurag Hazra',\n      'Gaurav Tewari',\n      'Kamlesh Chandnani',\n      'Saurav Rastogi',\n      'Rama Krushna Behera',\n      'Chaitanya Deorukhkar',\n      'Saurabh Daware',\n      'Vinay Chopra',\n      'Kajol Nigam',\n    ][Math.floor(Math.random() * 9)],\n  })),\n];\n\ntype Item = {\n  id: string;\n  paymentId: string;\n  amount: number;\n  status: string;\n  date: Date;\n  type: string;\n  method: string;\n  bank: string;\n  account: string;\n  name: string;\n};\n\nconst data: TableData<Item> = {\n  nodes,\n};\n\nconst TableExample = ({ onRowClick }) => {\n  return (\n    <TableComponent\n      data={data}\n      selectionType=\"none\"\n      toolbar={\n        <TableToolbar\n          title=\"Showing 1-10 [Items]\"\n          selectedTitle=\"Showing 1-10 [Items]\"\n        >\n          <TableToolbarActions>\n            <Button variant=\"secondary\" marginRight=\"spacing.2\">\n              Export\n            </Button>\n            <Button>Refund</Button>\n          </TableToolbarActions>\n        </TableToolbar>\n      }\n      sortFunctions={{\n        ID: (array) => array.sort((a, b) => Number(a.id) - Number(b.id)),\n        AMOUNT: (array) => array.sort((a, b) => a.amount - b.amount),\n        PAYMENT_ID: (array) =>\n          array.sort((a, b) => a.paymentId.localeCompare(b.paymentId)),\n        DATE: (array) =>\n          array.sort((a, b) => a.date.getTime() - b.date.getTime()),\n        STATUS: (array) =>\n          array.sort((a, b) => a.status.localeCompare(b.status)),\n      }}\n      pagination={\n        <TablePagination\n          onPageChange={console.log}\n          defaultPageSize={10}\n          onPageSizeChange={console.log}\n          showPageSizePicker\n          showPageNumberSelector\n        />\n      }\n    >\n      {(tableData) => (\n        <>\n          <TableHeader>\n            <TableHeaderRow>\n              <TableHeaderCell headerKey=\"PAYMENT_ID\">ID</TableHeaderCell>\n              <TableHeaderCell headerKey=\"NAME\">Account Holder</TableHeaderCell>\n              <TableHeaderCell headerKey=\"AMOUNT\">Amount</TableHeaderCell>\n              <TableHeaderCell headerKey=\"DATE\">Date</TableHeaderCell>\n              <TableHeaderCell headerKey=\"METHOD\">Method</TableHeaderCell>\n              <TableHeaderCell headerKey=\"STATUS\">Status</TableHeaderCell>\n            </TableHeaderRow>\n          </TableHeader>\n          <TableBody>\n            {tableData.map((tableItem, index) => (\n              <TableRow key={index} item={tableItem} onClick={onRowClick}>\n                <TableCell>\n                  <Code size=\"medium\">{tableItem.paymentId}</Code>\n                </TableCell>\n                <TableCell>{tableItem.name}</TableCell>\n                <TableCell>\n                  <Amount value={tableItem.amount} />\n                </TableCell>\n                <TableCell>\n                  {tableItem.date?.toLocaleDateString('en-IN', {\n                    year: 'numeric',\n                    month: '2-digit',\n                    day: '2-digit',\n                  })}\n                </TableCell>\n                <TableCell>{tableItem.method}</TableCell>\n                <TableCell>\n                  <Badge\n                    size=\"medium\"\n                    color={\n                      tableItem.status === 'Completed'\n                        ? 'positive'\n                        : tableItem.status === 'Pending'\n                        ? 'notice'\n                        : tableItem.status === 'Failed'\n                        ? 'negative'\n                        : 'primary'\n                    }\n                  >\n                    {tableItem.status}\n                  </Badge>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </>\n      )}\n    </TableComponent>\n  );\n};\n\nconst Timeline = ({ status }: { status: string }): React.ReactElement => {\n  return (\n    <StepGroup orientation=\"vertical\" size=\"medium\">\n      <StepItem\n        title=\"Payment Initiated\"\n        stepProgress={\n          ['Completed', 'Pending', 'Failed'].includes(status) ? 'full' : 'none'\n        }\n        marker={\n          <StepItemIndicator\n            color={\n              ['Completed', 'Pending', 'Failed'].includes(status)\n                ? 'positive'\n                : 'neutral'\n            }\n          />\n        }\n      />\n      <Collapsible direction=\"top\">\n        <CollapsibleLink>Show More</CollapsibleLink>\n        <CollapsibleBody>\n          <StepItem\n            title=\"Payment Processing\"\n            stepProgress={\n              ['Completed', 'Failed'].includes(status) ? 'full' : 'start'\n            }\n            marker={\n              <StepItemIndicator\n                color={\n                  ['Completed', 'Failed'].includes(status)\n                    ? 'positive'\n                    : 'notice'\n                }\n              />\n            }\n          />\n          <StepItem\n            title={status === 'Failed' ? 'Payment Failed' : 'Payment Completed'}\n            stepProgress={\n              ['Completed', 'Failed'].includes(status) ? 'full' : 'none'\n            }\n            marker={\n              <StepItemIndicator\n                color={\n                  status === 'Failed'\n                    ? 'negative'\n                    : status === 'Completed'\n                    ? 'positive'\n                    : 'neutral'\n                }\n              />\n            }\n          />\n        </CollapsibleBody>\n      </Collapsible>\n    </StepGroup>\n  );\n};\n\ntype KeyValueGridProps = {\n  children: React.ReactNode;\n  padding?: BoxProps['padding'];\n};\n\ntype KeyValueItemProps = {\n  label: string;\n  children: React.ReactNode;\n};\n\nconst KeyValueItem = ({\n  label,\n  children,\n}: KeyValueItemProps): React.ReactElement => {\n  return (\n    <>\n      <Text variant=\"body\" size=\"small\" color=\"surface.text.gray.muted\">\n        {label}\n      </Text>\n      <Box textAlign=\"right\">{children}</Box>\n    </>\n  );\n};\n\nconst KeyValueGrid = ({\n  children,\n}: KeyValueGridProps): React.ReactElement => {\n  return (\n    <Box\n      display=\"grid\"\n      gridTemplateColumns=\"160px 1fr\"\n      gap=\"spacing.3\"\n    >\n      {children}\n    </Box>\n  );\n};\n\nconst DetailedViewHighlight = ({ title, value }) => {\n  return (\n    <Box display=\"flex\">\n      <Divider thickness=\"thicker\" orientation=\"vertical\" />\n      <Box paddingX=\"spacing.3\">\n        <Text size=\"xsmall\" color=\"surface.text.gray.muted\" weight=\"semibold\">\n          {title}\n        </Text>\n        <Text size=\"medium\">{value}</Text>\n      </Box>\n    </Box>\n  );\n};\n\nconst DetailedViewDrawerHeaderSlot = ({\n  heading,\n  badges,\n  highlights,\n  actions,\n}) => {\n  return (\n    <>\n      <Box marginTop=\"spacing.6\" textAlign=\"center\">\n        {heading}\n      </Box>\n      <Box\n        display=\"flex\"\n        justifyContent=\"center\"\n        gap=\"spacing.4\"\n        marginTop=\"spacing.4\"\n      >\n        {badges}\n      </Box>\n      <Box\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        gap=\"spacing.4\"\n        marginTop=\"spacing.6\"\n        paddingX=\"spacing.4\"\n      >\n        {highlights}\n      </Box>\n      <Box\n        marginTop=\"spacing.6\"\n        display=\"flex\"\n        gap=\"spacing.3\"\n        textAlign=\"center\"\n      >\n        {actions}\n      </Box>\n    </>\n  );\n};\n\nconst DetailedViewDrawer = ({ isOpen, onDismiss, onUnmount, selectedItem }) => {\n  return (\n    <Drawer isOpen={isOpen} onDismiss={onDismiss} showOverlay={false} onUnmount={onUnmount}>\n      <DrawerHeader\n        title=\"Settlements\"\n        color={\n          selectedItem?.status === 'Completed'\n            ? 'positive'\n            : selectedItem?.status === 'Pending'\n            ? 'notice'\n            : 'negative'\n        }\n        trailing={\n          <IconButton\n            icon={MoreHorizontalIcon}\n            accessibilityLabel=\"Options\"\n            onClick={() => console.log('Options Clicked')}\n            size=\"large\"\n          />\n        }\n      >\n        <DetailedViewDrawerHeaderSlot\n          heading={\n            <Amount\n              value={selectedItem?.amount ?? 0}\n              currency=\"INR\"\n              size=\"2xlarge\"\n              type=\"heading\"\n              weight=\"semibold\"\n              suffix=\"decimals\"\n            />\n          }\n          badges={\n            <>\n              <Badge\n                size=\"medium\"\n                color={\n                  selectedItem?.status === 'Completed'\n                    ? 'positive'\n                    : selectedItem?.status === 'Pending'\n                    ? 'notice'\n                    : 'negative'\n                }\n                emphasis=\"intense\"\n              >\n                {selectedItem?.status ?? 'Pending'}\n              </Badge>\n            </>\n          }\n          highlights={\n            <>\n              <DetailedViewHighlight\n                title=\"Payment ID\"\n                value={selectedItem?.paymentId}\n              />\n              <DetailedViewHighlight\n                title=\"Date\"\n                value={selectedItem?.date?.toLocaleDateString('en-IN', {\n                  year: 'numeric',\n                  month: 'long',\n                  day: 'numeric',\n                })}\n              />\n            </>\n          }\n          actions={\n            <Button\n              variant=\"secondary\"\n              color=\"primary\"\n              size=\"small\"\n              icon={DownloadIcon}\n              isFullWidth\n            >\n              Download Report\n            </Button>\n          }\n        />\n      </DrawerHeader>\n      <DrawerBody>\n        <Box display=\"flex\" flexDirection=\"column\" gap=\"spacing.6\">\n          <Box>\n            <Text\n              variant=\"body\"\n              size=\"medium\"\n              weight=\"semibold\"\n              marginBottom=\"spacing.4\"\n            >\n              Timeline\n            </Text>\n            <Timeline status={selectedItem?.status ?? 'Pending'} />\n          </Box>\n          <Divider />\n          <Box>\n            <Text\n              variant=\"body\"\n              size=\"medium\"\n              weight=\"semibold\"\n              marginBottom=\"spacing.4\"\n            >\n              Details\n            </Text>\n            <KeyValueGrid>\n              {/* Amount */}\n              <KeyValueItem label=\"Amount\">\n                <Amount value={selectedItem?.amount ?? 0} />\n              </KeyValueItem>\n\n              {/* Amount Paid */}\n              <KeyValueItem label=\"Amount Paid\">\n                <Amount value={0} />\n              </KeyValueItem>\n\n              {/* Payment Link ID */}\n              <KeyValueItem label=\"Payment Link ID\">\n                <Box\n                  display=\"flex\"\n                  gap=\"spacing.2\"\n                  alignItems=\"center\"\n                  justifyContent=\"right\"\n                >\n                  <Code size=\"small\">{selectedItem?.paymentId ?? 'NA'}</Code>\n                  <Link variant=\"button\" size=\"small\" icon={CopyIcon} />\n                </Box>\n              </KeyValueItem>\n\n              {/* Reference ID */}\n              <KeyValueItem label=\"Reference ID\">\n                <Text variant=\"body\" size=\"medium\">\n                  NA\n                </Text>\n              </KeyValueItem>\n\n              {/* Payment For */}\n              <KeyValueItem label=\"Payment for\">\n                <Text variant=\"body\" size=\"medium\">\n                  {selectedItem?.type}\n                </Text>\n              </KeyValueItem>\n\n              {/* Partial Payment */}\n              <KeyValueItem label=\"Partial Payment\">\n                <Text variant=\"body\" size=\"medium\">\n                  Enabled\n                </Text>\n              </KeyValueItem>\n\n              {/* Reminders */}\n              <KeyValueItem label=\"Reminders\">\n                <Text variant=\"body\" size=\"medium\">\n                  Send auto reminders\n                </Text>\n              </KeyValueItem>\n\n              {/* Created By */}\n              <KeyValueItem label=\"Created By\">\n                <Text variant=\"body\" size=\"medium\">\n                  {selectedItem?.name}\n                </Text>\n              </KeyValueItem>\n            </KeyValueGrid>\n          </Box>\n        </Box>\n      </DrawerBody>\n    </Drawer>\n  );\n};\n\nconst App = () => {\n  const [isDrawerOpen, setIsDrawerOpen] = React.useState(false);\n  const [selectedItem, setSelectedItem] = React.useState(null);\n\n  const handleRowClick = ({ item }) => {\n    setSelectedItem(item);\n    setIsDrawerOpen(true);\n  };\n\n  return (\n    <Box>\n      <TableExample onRowClick={handleRowClick} />\n      <DetailedViewDrawer\n        isOpen={isDrawerOpen}\n        onDismiss={() => setIsDrawerOpen(false)}\n        onUnmount={() => setSelectedItem(null)}\n        selectedItem={selectedItem}\n      />\n    </Box>\n  );\n};\n\nexport default App;\n";
export { DetailedViewStoryCode };
