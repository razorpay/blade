name: Blade Validate

on: [pull_request]

# Add permissions required for coverage reporting
permissions:
  checks: write
  pull-requests: write
  contents: read

env:
  GITHUB_ACCESS_TOKEN: ${{ secrets.CI_BOT_TOKEN }}

jobs:
  validate:
    name: Validate Source Code
    runs-on: ubuntu-latest # nosemgrep: non-self-hosted-runner
    steps:
      - name: Checkout Codebase
        uses: actions/checkout@v3
      - name: Use Node v18
        uses: actions/setup-node@v3
        with:
          node-version: 18.12.1
      - name: Pre-Generate Documentation Lock File
        run: yarn generate-docs-lockfile
      - name: Setup Cache & Install Dependencies
        uses: ./.github/actions/install-dependencies
      - name: Build Blade
        run: yarn build
        working-directory: packages/blade
      - name: Lint Source Code
        run: yarn lint
      - name: Run TypeScript Checks
        run: yarn typecheck
        working-directory: packages/blade

  test:
    name: Run Tests (${{ matrix.shard }})
    runs-on: ubuntu-latest # nosemgrep: non-self-hosted-runner
    strategy:
      fail-fast: false
      matrix:
        shard: [1, 2, 3, 4]
        totalShards: [4]
    steps:
      - name: Checkout Codebase
        uses: actions/checkout@v3
      - name: Use Node v18
        uses: actions/setup-node@v3
        with:
          node-version: 18.12.1
      - name: Setup Cache & Install Dependencies
        uses: ./.github/actions/install-dependencies
      - name: Run Unit Tests with Coverage
        run: yarn test
        working-directory: packages/blade
        env:
          SHARD: ${{ matrix.shard }}/${{ matrix.totalShards }}


      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4  
        with:
          name: coverage-report-${{ matrix.shard }}
          path: packages/blade/coverage
          retention-days: 1

  coverage-report:
    name: Generate Coverage Report
    runs-on: ubuntu-latest
    needs: test
    permissions:
      checks: write
      pull-requests: write
      contents: read
      actions: read
    steps:
      - name: Checkout Codebase
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Use Node v18
        uses: actions/setup-node@v3
        with:
          node-version: 18.12.1
      - name: Setup Cache & Install Dependencies
        uses: ./.github/actions/install-dependencies
      - name: Download Coverage Reports
        uses: actions/download-artifact@v4
        with:
          path: coverage-reports
      - name: Debug Downloaded Artifacts
        run: |
          echo "Checking downloaded coverage reports..."
          find coverage-reports -type f -name "*.json" | head -20
          ls -la coverage-reports/
      - name: Create Merged Coverage Report
        run: |
          # Create directory for nyc output
          mkdir -p .nyc_output
          
          # Find and copy all coverage-final.json files to .nyc_output with unique names
          counter=1
          find coverage-reports -name "coverage-final.json" | while read file; do
            cp "$file" ".nyc_output/coverage-final-${counter}.json"
            counter=$((counter + 1))
          done
          
          # List files in .nyc_output for debugging
          echo "Files in .nyc_output:"
          ls -la .nyc_output/
          
          # Generate merged report
          yarn nyc report --reporter=json --reporter=text-summary
          
          # Ensure output directory exists
          mkdir -p packages/blade/coverage
          
          # Copy the merged report to expected location
          if [ -f "coverage/coverage-final.json" ]; then
            cp coverage/coverage-final.json packages/blade/coverage/
            echo "Coverage file copied successfully"
          else
            echo "Error: coverage/coverage-final.json not found"
            exit 1
          fi
      - name: Verify Coverage File
        run: |
          echo "Checking final coverage file..."
          if [ -f "packages/blade/coverage/coverage-final.json" ]; then
            echo "Coverage file exists"
            echo "File size: $(wc -c < packages/blade/coverage/coverage-final.json) bytes"
            echo "First 200 characters:"
            head -c 200 packages/blade/coverage/coverage-final.json
          else
            echo "Error: Coverage file not found"
            exit 1
          fi
      - name: Report Coverage
        uses: ArtiomTr/jest-coverage-report-action@v3
        continue-on-error: true
        with:
          github-token: ${{ secrets.CI_BOT_TOKEN }}
          coverage-file: ./packages/blade/coverage/coverage-final.json
          base-coverage-file: ./packages/blade/coverage/coverage-final.json
          skip-step: install
