#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

/**
 * Script to combine markdown files from knowledgebase directories
 * into single files: components.md, general.md, and patterns.md
 */

const KNOWLEDGEBASE_PATH = path.join(__dirname, '../packages/blade-mcp/knowledgebase');
const OUTPUT_PATH = path.join(__dirname, '..'); // Root of blade repo

/**
 * Read all markdown files from a directory and combine them
 * @param {string} dirPath - Path to the directory containing markdown files
 * @param {string} outputFileName - Name of the output file
 * @param {string} title - Title for the combined document
 */
function combineMarkdownFiles(dirPath, outputFileName, title) {
  try {
    // Check if directory exists
    if (!fs.existsSync(dirPath)) {
      console.log(`Directory ${dirPath} does not exist. Skipping...`);
      return;
    }

    // Read all files in the directory
    const files = fs
      .readdirSync(dirPath)
      .filter((file) => file.endsWith('.md'))
      .sort(); // Sort alphabetically for consistent output

    if (files.length === 0) {
      console.log(`No markdown files found in ${dirPath}. Skipping...`);
      return;
    }

    console.log(`Found ${files.length} markdown files in ${path.basename(dirPath)}`);

    // Start building the combined content
    let combinedContent = `# ${title}\n\n`;
    combinedContent += `*This file is automatically generated by combining all markdown files from the ${path.basename(
      dirPath,
    )} directory.*\n\n`;
    combinedContent += `---\n\n`;

    // Process each file
    files.forEach((file, index) => {
      const filePath = path.join(dirPath, file);
      const content = fs.readFileSync(filePath, 'utf8');

      // Add file header
      const fileName = path.basename(file, '.md');
      combinedContent += `## ${fileName}\n\n`;

      // Add the content (remove the first heading if it exists to avoid duplication)
      const processedContent = content.replace(/^#\s+.*$/m, '').trim();
      combinedContent += processedContent;

      // Add separator between files (except for the last one)
      if (index < files.length - 1) {
        combinedContent += '\n\n---\n\n';
      }
    });

    // Write the combined file
    const outputPath = path.join(OUTPUT_PATH, outputFileName);
    fs.writeFileSync(outputPath, combinedContent, 'utf8');

    console.log(`✅ Successfully created ${outputFileName} with ${files.length} files combined`);
  } catch (error) {
    console.error(`❌ Error processing ${dirPath}:`, error.message);
  }
}

/**
 * Combine all three knowledgebase sections into a single LLMs.txt file
 */
function combineAllIntoLLMs() {
  console.log('🚀 Starting LLMs.txt combination process...\n');

  let combinedContent = '# Blade Design System Knowledge Base\n\n';
  combinedContent +=
    '*This file contains the complete knowledge base for the Blade Design System, including components, general guidelines, and patterns.*\n\n';
  combinedContent += '---\n\n';

  // Define the directories to process
  const directories = [
    {
      dir: path.join(KNOWLEDGEBASE_PATH, 'components'),
      title: 'Components',
    },
    {
      dir: path.join(KNOWLEDGEBASE_PATH, 'general'),
      title: 'General',
    },
    {
      dir: path.join(KNOWLEDGEBASE_PATH, 'patterns'),
      title: 'Patterns',
    },
  ];

  let totalFiles = 0;

  directories.forEach(({ dir, title }, sectionIndex) => {
    try {
      if (!fs.existsSync(dir)) {
        console.log(`Directory ${dir} does not exist. Skipping...`);
        return;
      }

      const files = fs
        .readdirSync(dir)
        .filter((file) => file.endsWith('.md'))
        .sort();

      if (files.length === 0) {
        console.log(`No markdown files found in ${dir}. Skipping...`);
        return;
      }

      console.log(`📁 Processing ${title} directory (${files.length} files)...`);

      // Add section header
      combinedContent += `# ${title}\n\n`;

      // Process each file in this section
      files.forEach((file, fileIndex) => {
        const filePath = path.join(dir, file);
        const content = fs.readFileSync(filePath, 'utf8');

        // Add file header
        const fileName = path.basename(file, '.md');
        combinedContent += `## ${fileName}\n\n`;

        // Add the content (remove the first heading if it exists to avoid duplication)
        const processedContent = content.replace(/^#\s+.*$/m, '').trim();
        combinedContent += processedContent;

        // Add separator between files (except for the last file in the section)
        if (fileIndex < files.length - 1) {
          combinedContent += '\n\n---\n\n';
        }
      });

      // Add separator between sections (except for the last section)
      if (sectionIndex < directories.length - 1) {
        combinedContent += '\n\n---\n\n';
      }

      totalFiles += files.length;
    } catch (error) {
      console.error(`❌ Error processing ${dir}:`, error.message);
    }
  });

  // Write the combined file
  const outputPath = path.join(OUTPUT_PATH, 'llms.txt');
  fs.writeFileSync(outputPath, combinedContent, 'utf8');

  console.log(`\n✅ Successfully created llms.txt with ${totalFiles} files combined`);

  // Show file size
  const stats = fs.statSync(outputPath);
  console.log(`📄 File size: ${(stats.size / 1024).toFixed(2)} KB`);

  console.log('\n🎉 LLMs.txt combination process completed!');
}

/**
 * Main function to combine all knowledgebase files
 */
function main() {
  combineAllIntoLLMs();
}

// Run the script
if (require.main === module) {
  main();
}

module.exports = { combineMarkdownFiles, combineAllIntoLLMs, main };
